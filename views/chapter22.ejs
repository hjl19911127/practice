<!DOCTYPE html>
<html>
<head>
	<title><%= title %></title>
	<link rel="stylesheet" href="/highlight/styles/monokai-sublime.css">
	<link rel="stylesheet" href="/stylesheets/style.css">
	<script src='/highlight/highlight.pack.js'></script>
	<script src='/javascripts/EventUtil.js'></script>
</head>
<body>
	<header>
		<h5>第22章 高级技巧</h5>
	</header>
	<main>
		<ol>
			<li>高级函数
				<ul>
					<li>安全的类型检测</li>
					<pre><code>
					// object原生的toString()
					function isArray(value){
						return Object.prototype.toString.call(value) === '[object Array]';
					}
					function isFunction(value){
						return Object.prototype.toString.call(value) === '[object Function]';
					}
					function isRegExp(value){
						return Object.prototype.toString.call(value) === '[object RegExp]';
					}
					</code></pre>
					<li>作用域安全的构造函数</li>
					<pre><code>
					function Person(name, age, job){
						if(this instanceof Person){
							this.name = name;
							this.age = age;
							this.job = job;
						}else{
							return new Person(name, age, job);
						}
					}
					var person1 = Person('Nicholas', 29, 'Software Engineer');
					alert(window.name); //''
					alert(person1.name); //'Nicholas'

					var person2 = new Person('Shelby', 34, 'Ergonomist');
					alert(person2.name);
					</code></pre>
					<pre><code>
					function Polygon(sides){
						if(this instanceof Polygon){
							this.sides = sides;
							this.getArea = function(){
								return 0;
							}
						}else{
							return new Polygon(sides);
						}
						
					}
					function Rectangle(width, height){
						Polygon.call(this, 2);
						this.width = width;
						this.height = height;
						this.getArea = function(){
							return this.width * this.height;
						}
					}
					Rectangle.prototype = new Polygon();  // 保证 Rectangle实例拥有sides属性
					var rect = new Rectangle(5,10);
					console.log(rect.sides); //2
					</code></pre>
					<li>惰性载入函数</li>
					<pre><code class="javascript">
					var createXHR = (function(){
						if(typeof XMLHttpRequest !== 'undefined'){
							return function(){
								return new XMLHttpRequest();
							}
						}else if(typeof ActiveXObject !== 'undefined'){
							return function(){
								if(typeof arguments.callee.activeXString !== 'string'){
									var version = ['MSXML2.XMLHttp.6.0','MSXML2.XMLHttp.3.0','MSXML2.XMLHttp'],
									i, len;
									for(i=0,len=version.length;i&lt;len;i++){
										try{
											new ActiveXObject(version[i]);
											arguments.callee.activeXString = version[i];
										}catch(ex){}
									}
								}
								return new ActiveXObject(arguments.callee.activeXString);
							}
						}else{
							return function(){
								throw new Error('NO XHR object available');
							}
						}
					})();
					</code></pre>
					<li>函数绑定</li>
					<pre><code class="javascript">
					function bind(fn, context){
						return function(){
							return fn.apply(context, arguments);
						}
					}
					var handler = {
						message: 'Event handled',
						handleClick: function(event){
							alert(this.message + ':' + event.type);
						}
					};
					var btn = document.getElementById('my-btn');
					EventUtil.addHandler(btn,'click',bind(handler.handleClick, handler));
					EventUtil.addHandler(btn,'click',handler.handleClick.bind(handler)); // es5 原始bind
					</code></pre>
					<li>函数柯里化</li>
					<pre><code class="javascript">
					function curry(fn){
						var args = Array.prototype.slice.call(arguments,1);
						return function(){
							var innerArgs = Array.prototype.slice.call(arguments);
							var finalArgs = args.concat(innerArgs);
							return fn.apply(null, finalArgs);
						}
					}
					function add(num1, num2){
						return num1 + num2;
					}
					var curriedAdd = curry(add, 5); // curry(add, 5, 12);
					console.log(curriedAdd(3));
					</code></pre>
					<pre><code class="javascript">
					function bind(fn, context){
						var args = Array.prototype.slice.call(arguments, 2);
						return function(){
							var innerArgs = Array.prototype.slice.call(arguments);
							var finalArgs = args.concat(innerArgs);
							return fn.apply(context, finalArgs);
						}
					}
					var hanlder = {
						message: 'Event handled',
						handleClick: function(name, event){
							console.log(this.message + ':' + name + ':' +event.type);
						}
					};
					var btn = document.getElementById('my-btn');
					EventUtil.addHandler(btn,'click',bind(handler.handleClick, handler, 'my-btn'));
					EventUtil.addHandler(btn,'click',handler.handleClick.bind(handler, 'my-btn')); //es5 bind
					</code></pre>
				</ul>
			</li>
			<li>防篡改对象
				<ul>
					<li>不可扩展对象:可以修改和删除已有的成员</li>
					<pre><code class="javascript">
					var person = {name:'Nicholas'};
					Object.preventExtensions(person);
					person.age = 29;
					console.log(person.age); //undefined
					console.log(Object.isExtensible(person));  //false
					</code></pre>
					<li>密封对象:不可扩展、不能删除属性和方法、属性值可修改 </li>
					<pre><code class="javascript">
					var person = {name: 'Nicholas'};
					Object.seal(person);
					person.age=29;
					console.log(person.age); //undefined
					delete person.name;
					console.log(person.name); //'Nicholas'
					console.log(Object.isExtensible(person)); //false
					console.log(Object.isSealed(person)); //true
					</code></pre>
					<li>冻结的对象：不可扩展，密封，[[Writable]]特性会被设置为 false</li>
					<pre><code class="javascript">
					var person = {name: 'Nicholas'};
					Object.freeze(person);
					person.age = 29;
					console.log(age);//undefined;
					delete person.name;
					console.log(person.name);//'Nicholas'
					person.name='Greg';
					console.log(person.name);//'Nicholas'
					</code></pre>
				</ul>
			</li>
			<li>高级定时器
			<ul>
				<li>setInterval的两个问题：(1)某些间隔会被跳过；(2)多个定时器的代码执行之间的间隔可能会比预期小</li>
				<li>链式setTimeout()</li>
				<pre><code class="javascript">
				setTimeout(function(){
					var div = document.getElementById('myDiv'),
						left = parseInt(div.style.left) + 5;
					div.style.left = left + 'px';
					if(left&lt;200){
						setTimeout(arguments.callee, 50);
					}
				},50)
				</code></pre>
				<li>yielding processes</li>
				<pre><code class="javascript">
				function chunk(array, process, context){
					setTimeout(function(){
						var item = array.shift();
						process.call(context, item);
						if(array.length>0){
							setTimeout(arguments.callee, 100);
						}
					}, 100);
				}
				var data = [12,123,1234,453,436,23,23,5,4123,45,346,5634,2234,345,342];
				function printValue(item){
					var div = document.getElementById('myDiv');
					div.innerHTML += item + '&lt;br&gt;';
				}
				chunk(data.concat(), printValue);
				</code></pre>
				<li>函数节流</li>
				<pre><code class="javascript">
				function throttle(method, context){
					clearTimeout(method.tId);
					method.tId=setTimeout(function(){
						method.call(context);
					},100);
				}
				function resizeDiv(){
					var div = document.getElementById('myDiv');
					div.style.height = div.offsetWidth + 'px';
				}
				window.onresize = function(){
					throttle(resizeDiv);
				}
				</code></pre>
			</ul>
			</li>
			<li>自定义事件
			<pre><code class="javascript">
			function EventTarget(){
				this.handlers = {};
			}
			EventTarget.prototype = {
				constructor: EventTarget,
				addHandler: function(type, handler){
					if(typeof this.handlers[type] == 'undefined'){
						this.handlers[type] = [];
					}
					this.handlers[type].push(handler);
				},
				fire: function(event){
					if(!event.target){
						event.target = this;
					}
					if(this.handlers[event.type] instanceof Array){
						var handlers = this.handlers[event.type];
						for(var i = 0, len = handlers.length; i < len; i++){
							handlers[i](event);
						}
					}
				},
				removeHandler: function(type, handler){
					if(this.handlers[type] instanceof Array){
						var handlers = this.handlers[type];
						for(var i = 0, len = handlers.length; i < len; i++){
							if(handlers[i] === handler){
								break;
							}
						}
						handlers.splice(i, 1);
					}
				}
			}
			function handleMessage(event){
				alert('Message received: ' + event.message);
			}
			var target = new EventTarget();
			target.addHandler('message', handleMessage);
			target.fire({type: 'message', message: 'Hello world!'});
			target.removeHandler('message',handleMessage);
			</code></pre>
			<pre><code class="javascript">
			function object(o){
				function F(){};
				F.prototype = o;
				return new F();
			}
			function inheritPrototype(subType, superType){
				var prototype = object(superType.prototype);
				prototype.constructor = subType;
				subType.prototype = prototype;
			}
			function Person(name, age){
				eventTarget.call(this);
				this.name = name;
				this.age = age;
			}
			inheritPrototype(Person, EventTarget);
			Person.prototype.say = function(message){
				this.fire({type: 'message', message: message});
			}
			function handleMessage(event){
				alert(event.target.name + 'says: ' + event.message);
			}
			var person = new Person('Nicholas', 29);
			person.addHandler('message',handleMessage);
			person.say('Hi there.');
			</code></pre>
			</li>
			<li>拖放</li>
			<div class="draggable" style="position: absolute;background:red;width: 100px;height: 100px;"></div>
			<pre><code class="javascript">
			var DragDrop = function(){
				var dragdrop = new EventTarget(),
					dragging = null,
					diffX = 0, diffY = 0;
				function handleEvent(event){
					event = EventUtil.getEvent(event);
					var target = EventUtil.getTarget(event);
					switch(event.type){
						case 'mousedown':
							if(target.className.indexOf('draggable') > -1){  
								dragging = target;
								diffX = event.clientX - target.offsetLeft;
								diffY = event.clientY - target.offsetTop;
								dragdrop.fire({type: 'dragstart',target: dragging, x: event.clientX, y: event.clientY});
							}
							break;
						case 'mousemove':
							if(dragging !== null){
								dragging.style.left = (event.clientX - diffX) + 'px';
								dragging.style.top = (event.clientY - diffY) + 'px';
								dragdrop.fire({type: 'drag', target: dragging, x: event.clientX, y: event.clientY});
							}
							break;
						case 'mouseup':
							dragdrop.fire({type: 'dragend',target: dragging, x: event.clientX, y: event.clientY});
							dragging = null;
							break;
					}
				}
				
				dragdrop.enable = function(){
					EventUtil.addHandler(document, 'mousedown', handleEvent);
					EventUtil.addHandler(document, 'mousemove', handleEvent);
					EventUtil.addHandler(document, 'mouseup', handleEvent);
				}
				dragdrop.disable = function(){
					EventUtil.removeHandler(document, 'mousedown', handleEvent);
					EventUtil.removeHandler(document, 'mousemove', handleEvent);
					EventUtil.removeHandler(document, 'mouseup', handleEvent);
				}
				return dragdrop;
				
			}();
			DragDrop.addHandler("dragstart", function(event){
				var status = document.getElementById("status");
					status.innerHTML = "Started dragging " + event.target.id;
			});
			DragDrop.addHandler("drag", function(event){
				var status = document.getElementById("status");
				status.innerHTML += "Dragged " + event.target.id + " to (" + event.x +"," + event.y + ")";
			});
			DragDrop.addHandler("dragend", function(event){
				var status = document.getElementById("status");
				status.innerHTML += "Dropped " + event.target.id + " at (" + event.x +"," + event.y + ")";
			});
			DragDrop.enable();
			</code></pre>
		</ol>
	</main>
	<script>
	hljs.initHighlightingOnLoad();


	</script>
</body>
</html>


     